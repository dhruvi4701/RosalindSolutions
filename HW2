{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMJJhdoMTDT2TJ8p9us+FfD",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/dhruvi4701/RosalindSolutions/blob/main/HW2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "seq= 'AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC'\n",
        "\n",
        "def ntd(seq):\n",
        "  count_a= seq.count('A')\n",
        "  count_c = seq.count('C')\n",
        "  count_g = seq.count('G')\n",
        "  count_t = seq.count('T')\n",
        "  print(f\"{count_a} {count_c} {count_g} {count_t}\")\n",
        "\n",
        "ntd(seq)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PHQrdDzhEzri",
        "outputId": "90748a4e-4695-4c8c-c656-33ea6da2d8f2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "20 12 17 21\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#RNA\n",
        "def dna_to_rna(dna_string):\n",
        "    return dna_string.replace('T', 'U')\n",
        "\n",
        "dna_string = \"GATGGAACTTGACTACGTAAATT\"\n",
        "rna_string = dna_to_rna(dna_string)\n",
        "rna_string\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "uMX_MyAvtTux",
        "outputId": "ae5b704e-dcf5-41d0-a301-bac5fa1fd983"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'GAUGGAACUUGACUACGUAAAUU'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#REVC\n",
        "def reverse_complement(dna_string):\n",
        "    complement = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}\n",
        "    reversed_string = dna_string[::-1]\n",
        "    complement_string = \"\".join([complement[base] for base in reversed_string])\n",
        "    return complement_string\n",
        "\n",
        "dna_string = \"AAAACCCGGT\"\n",
        "result = reverse_complement(dna_string)\n",
        "result\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "r5YUeFfytrsZ",
        "outputId": "78541685-8771-4673-a708-3961ff7e678b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'ACCGGGTTTT'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#GC\n",
        "def parse_fasta(fasta_str):\n",
        "    \"\"\"Parses a FASTA formatted string and returns a dictionary of sequence IDs and sequences.\"\"\"\n",
        "    sequences = {}\n",
        "    current_label = None\n",
        "    for line in fasta_str.strip().split(\"\\n\"):\n",
        "        if line.startswith(\">\"):\n",
        "            current_label = line[1:]\n",
        "            sequences[current_label] = \"\"\n",
        "        else:\n",
        "            sequences[current_label] += line\n",
        "    return sequences\n",
        "\n",
        "def gc_content(sequence):\n",
        "    \"\"\"Calculates the GC-content of a DNA sequence.\"\"\"\n",
        "    gc_count = sum(1 for base in sequence if base in \"GC\")\n",
        "    return (gc_count / len(sequence)) * 100\n",
        "\n",
        "fasta_data = \"\"\">Rosalind_6404\n",
        "CCTGCGGAAGATCGGCACTAGAATAGCCGAAGACCGTTTCTCTGAGGCTTCCCTTCCC\n",
        "TCCCACTAATAATTCTGAGG\n",
        ">Rosalind_5959\n",
        "CCATCGGTAGCGACTCCATAGTCCAATTAAGTCCCTACGCTCCCGGAAGGTCT\n",
        "ATATCCATTGTCAGCAGACACGC\n",
        ">Rosalind_0808\n",
        "CCACCCTCGTGGTATGGCTAGGCATTGCAGGCGAGCCGGAAGCCTGAGCCCGGAC\n",
        "TGGGAACCTGCGGGCAGTAGGTGGAAT\"\"\"\n",
        "sequences = parse_fasta(fasta_data)\n",
        "gc_contents = {label: gc_content(seq) for label, seq in sequences.items()}\n",
        "max_gc_label = max(gc_contents, key=gc_contents.get)\n",
        "max_gc_value = gc_contents[max_gc_label]\n",
        "\n",
        "print(max_gc_label)\n",
        "print(f\"{max_gc_value:.6f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "clDr3bZ9SXrU",
        "outputId": "57f74083-23bc-4b3e-e600-6636f2a5f612"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Rosalind_0808\n",
            "64.634146\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#HAMM\n",
        "\n",
        "def hamming_distance(s, t):\n",
        "    \"\"\"Computes the Hamming distance between two DNA strings s and t.\"\"\"\n",
        "    return sum(1 for a, b in zip(s, t) if a != b)\n",
        "\n",
        "s = \"GAGCCTACTAACGGGAT\"\n",
        "t = \"CATCGTAATGACGGCCT\"\n",
        "\n",
        "distance = hamming_distance(s, t)\n",
        "\n",
        "print(distance)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TohgL8XjSobs",
        "outputId": "e05ef8db-e17d-4d0d-d930-7ce005428adb"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "7\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#PROT\n",
        "\n",
        "rna_codon_table = {\n",
        "    'UUU': 'F', 'UUC': 'F', 'UUA': 'L', 'UUG': 'L',\n",
        "    'UCU': 'S', 'UCC': 'S', 'UCA': 'S', 'UCG': 'S',\n",
        "    'UAU': 'Y', 'UAC': 'Y', 'UAA': 'Stop', 'UAG': 'Stop',\n",
        "    'UGU': 'C', 'UGC': 'C', 'UGA': 'Stop', 'UGG': 'W',\n",
        "    'CUU': 'L', 'CUC': 'L', 'CUA': 'L', 'CUG': 'L',\n",
        "    'CCU': 'P', 'CCC': 'P', 'CCA': 'P', 'CCG': 'P',\n",
        "    'CAU': 'H', 'CAC': 'H', 'CAA': 'Q', 'CAG': 'Q',\n",
        "    'CGU': 'R', 'CGC': 'R', 'CGA': 'R', 'CGG': 'R',\n",
        "    'AUU': 'I', 'AUC': 'I', 'AUA': 'I', 'AUG': 'M',\n",
        "    'ACU': 'T', 'ACC': 'T', 'ACA': 'T', 'ACG': 'T',\n",
        "    'AAU': 'N', 'AAC': 'N', 'AAA': 'K', 'AAG': 'K',\n",
        "    'AGU': 'S', 'AGC': 'S', 'AGA': 'R', 'AGG': 'R',\n",
        "    'GUU': 'V', 'GUC': 'V', 'GUA': 'V', 'GUG': 'V',\n",
        "    'GCU': 'A', 'GCC': 'A', 'GCA': 'A', 'GCG': 'A',\n",
        "    'GAU': 'D', 'GAC': 'D', 'GAA': 'E', 'GAG': 'E',\n",
        "    'GGU': 'G', 'GGC': 'G', 'GGA': 'G', 'GGG': 'G'\n",
        "}\n",
        "\n",
        "def translate_rna_to_protein(rna):\n",
        "    protein = []\n",
        "    for i in range(0, len(rna), 3):\n",
        "        codon = rna[i:i+3]\n",
        "        if codon in rna_codon_table:\n",
        "            amino_acid = rna_codon_table[codon]\n",
        "            if amino_acid == \"Stop\":\n",
        "                break\n",
        "            protein.append(amino_acid)\n",
        "    return \"\".join(protein)\n",
        "\n",
        "\n",
        "rna_sequence = \"AUGGCCAUGGCGCCCAGAACUGAGAACUAAGUACCCGUAUUAAACGGGUGA\"\n",
        "protein_string = translate_rna_to_protein(rna_sequence)\n",
        "\n",
        "print(protein_string)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "keiO9myDS75A",
        "outputId": "901bc3a5-77b2-4dd5-be73-ce70c468adf5"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MAMAPRTEN\n"
          ]
        }
      ]
    }
  ]
}